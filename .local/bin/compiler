#!/bin/env bash

# This script will compile or run another finishing operation on a document. I
# have this script run via vim.
#
# Compiles .tex. groff (.mom, .ms), .rmd, .md, .org.  Opens .sent files as sent
# presentations. Runs scripts based on extention or shebang.
#
# Note that .tex files which you wish to compile with XeLaTeX should have the
# string "xelatex" somewhere in a comment/command in the first 5 lines.

file=$(readlink -f "$1")
dir="$2"
base="${file%.*}"
ext="${file##*.}"

cd "$dir" || exit 1

bibfile() { \
    BIBER="biber --input-directory $dir $base"
    echo "bibfile: $1"
    case "$dir/$1" in
        *main.tex) if grep -qi addbibresource "$file"; then
            $BIBER && echo "biber"
        else
            bibtex main && echo "bibtex"
        fi ;;
    esac
}

textype() { \
    echo "textype: $1"
	command="pdflatex"
	( head -n5 "$1" | grep -qi 'xelatex' ) && command="xelatex"
	$command -shell-escape --output-directory="$dir" "$1" &&
    bibfile "$1" &&
	$command -shell-escape --output-directory="$dir" "$1" &&
    exit 0
}

maintex() { \
    if [[ -f "main.tex" ]] ; then
        file="main.tex"
        textype "$file"
    else
        textype "$1"
    fi
}

pandoc_cr() {
    command="basic"
    [ -f "makefile" ] && command="make"
    ( head "$1" -n5 | grep -qi 'studienarbeit' ) && command="studienarbeit"
    case "$command" in
        make)
            echo "using make" && make -C "$dir" ;;
        studienarbeit)
            echo "studienarbeit" && pandoc "$1" --filter pandoc-crossref --citeproc --template=templates/oth_template.tex -o "$base".pdf --listings ;;
        basic)
            echo "basic" && pandoc --wrap=preserve -V geometry:a4paper,margin=2.3cm --highlight-style=kate -s -o "$base".pdf "$file" ;;
    esac
}


case "$ext" in
	# Try to keep these cases in alphabetical order.
	[0-9]) preconv "$file" | refer -PS -e | groff -mandoc -T pdf > "$base".pdf ;;
	c) cc "$file" -o "$base" && "$base" ;;
	cpp) g++ "$file" -o "$base" && "$base" ;;
	cs) mcs "$file" && mono "$base".exe ;;
	go) go run "$file" ;;
	h) sudo make install ;;
	java) javac -d classes "$file" && java -cp classes "${1%.*}" ;;
    js) node "$file" ;;
	m) octave "$file" ;;
	md) pandoc_cr $file;;
	mom) preconv "$file" | refer -PS -e | groff -mom -kept -T pdf > "$base".pdf ;;
	ms) preconv "$file" | refer -PS -e | groff -me -ms -kept -T pdf > "$base".pdf ;;
	org) emacs "$file" --batch -u "$USER" -f org-latex-export-to-pdf ;;
	py) python "$file" ;;
	[rR]md) Rscript -e "rmarkdown::render('$file', quiet=TRUE)" ;;
	rs) cargo build ;;
	sass) sassc -a "$file" "$base.css" ;;
	scad) openscad -o "$base".stl "$file" ;;
	sent) setsid -f sent "$file" 2>/dev/null ;;
	tex) maintex "$file" ;;
	*) sed -n '/^#!/s/^#!//p; q' "$file" | xargs -r -I % "$file" ;;
esac
